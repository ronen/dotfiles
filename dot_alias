alias d='dirs -v'
alias g=git
alias h='history | less'
alias history='history 1'
alias j=jobs
alias lf='"ls" --color -F'
alias ll='lf -l'
alias ls='lf'
alias npm-workspaces='npm query .workspace | jq -r ".[].location"'
alias npr='npm run'
alias po=popd
alias pup='pu ${$(npm root):h}'
alias pur='pu $(git rev-parse --show-toplevel)'
alias rrm=/bin/rm
alias sc='source ~/.zshrc'

#unalias pu
function pu() { # this implements tcsh's "dextract" behavior.  it presupposes pushdminus is *not* set
  unsetopt pushdminus
  if (( ${#*} == 1 )) && [[ $1 =~ '^\+' ]] ; then
    dirlist=("${(@f)$(dirs -p)}")
    newdir=$dirlist[$(( $1 + 1 ))]
    builtin popd $1
    builtin pushd ${~newdir}
  else
    builtin pushd $*
  fi
}

function gvimr() { gvim --remote-silent $* }
function rm() { move_with_backup ~/.Trash $* }

# Moves one or more files to a directory, renaming existing files with an
# incrementing .number suffix
function move_with_backup() {
  local dest_dir="$1"
  shift  # shift the arguments so that $@ refers to the list of files

  for src_file in "$@"; do
    local filename="${src_file:t}"  # extract the filename from the source
    local dest_path="$dest_dir/$filename"

    # If a file with the same name exists in the destination, rename the existing file
    if [[ -e "$dest_path" ]]; then
      local new_path="$dest_path"
      local num=1
      # Find a new name for the existing file by appending an incremented number
      while [[ -e "$new_path" ]]; do
        new_path="$dest_path.$num"
        ((num++))
      done
      mv "$dest_path" "$new_path"
      echo "Existing $dest_path moved to $new_path"
    fi

    # Now move the source file to the destination (keeping its original name)
    mv "$src_file" "$dest_path"
  done
}

